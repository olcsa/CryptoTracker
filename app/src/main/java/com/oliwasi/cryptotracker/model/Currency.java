/*
 * CryptoTracker REST Server API
 * CryptoTracker API leírása.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: oliwasi@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.oliwasi.cryptotracker.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import java.math.BigDecimal;
/**
 * Currency
 */

public class Currency {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("txFee")
  private BigDecimal txFee = null;

  @SerializedName("depositAddress")
  private String depositAddress = null;

  @SerializedName("disabled")
  private Integer disabled = null;

  @SerializedName("delisted")
  private Integer delisted = null;

  @SerializedName("frozen")
  private Integer frozen = null;

  public Currency id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Currency name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Full name of the currency
   * @return name
  **/
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Currency txFee(BigDecimal txFee) {
    this.txFee = txFee;
    return this;
  }

   /**
   * Fee to withdraw the currency
   * @return txFee
  **/
  public BigDecimal getTxFee() {
    return txFee;
  }

  public void setTxFee(BigDecimal txFee) {
    this.txFee = txFee;
  }

  public Currency depositAddress(String depositAddress) {
    this.depositAddress = depositAddress;
    return this;
  }

   /**
   * Get depositAddress
   * @return depositAddress
  **/
  public String getDepositAddress() {
    return depositAddress;
  }

  public void setDepositAddress(String depositAddress) {
    this.depositAddress = depositAddress;
  }

  public Currency disabled(Integer disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * (1) or not (0) deposits and withdrawals are disabled
   * @return disabled
  **/
  public Integer getDisabled() {
    return disabled;
  }

  public void setDisabled(Integer disabled) {
    this.disabled = disabled;
  }

  public Currency delisted(Integer delisted) {
    this.delisted = delisted;
    return this;
  }

   /**
   * (1) or not (0) his currency has been delisted from the exchange
   * @return delisted
  **/
  public Integer getDelisted() {
    return delisted;
  }

  public void setDelisted(Integer delisted) {
    this.delisted = delisted;
  }

  public Currency frozen(Integer frozen) {
    this.frozen = frozen;
    return this;
  }

   /**
   * (1) or not (0) trading for this currency is disabled for trading
   * @return frozen
  **/
  public Integer getFrozen() {
    return frozen;
  }

  public void setFrozen(Integer frozen) {
    this.frozen = frozen;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Currency currency = (Currency) o;
    return Objects.equals(this.id, currency.id) &&
        Objects.equals(this.name, currency.name) &&
        Objects.equals(this.txFee, currency.txFee) &&
        Objects.equals(this.depositAddress, currency.depositAddress) &&
        Objects.equals(this.disabled, currency.disabled) &&
        Objects.equals(this.delisted, currency.delisted) &&
        Objects.equals(this.frozen, currency.frozen);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, txFee, depositAddress, disabled, delisted, frozen);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Currency {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    txFee: ").append(toIndentedString(txFee)).append("\n");
    sb.append("    depositAddress: ").append(toIndentedString(depositAddress)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    delisted: ").append(toIndentedString(delisted)).append("\n");
    sb.append("    frozen: ").append(toIndentedString(frozen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
