/*
 * CryptoTracker REST Server API
 * CryptoTracker API leírása.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: oliwasi@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.oliwasi.cryptotracker.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

/**
 * CurrencyPair
 */

public class CurrencyPair {
  @SerializedName("id")
  private Integer id = null;

  private String primaryCurrency;

  private String secondaryCurrency;

  @SerializedName("last")
  private String last = null;

  @SerializedName("lowestAsk")
  private String lowestAsk = null;

  @SerializedName("highestBid")
  private String highestBid = null;

  @SerializedName("percentChange")
  private String percentChange = null;

  @SerializedName("baseVolume")
  private String baseVolume = null;

  @SerializedName("quoteVolume")
  private String quoteVolume = null;

  @SerializedName("isFrozen")
  private String isFrozen = null;

  @SerializedName("high24hr")
  private String high24hr = null;

  @SerializedName("low24hr")
  private String low24hr = null;

  public CurrencyPair id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public CurrencyPair last(String last) {
    this.last = last;
    return this;
  }

   /**
   * Price for the most recent trade for this pair
   * @return last
  **/
  public String getLast() {
    return last;
  }

  public void setLast(String last) {
    this.last = last;
  }

  public CurrencyPair lowestAsk(String lowestAsk) {
    this.lowestAsk = lowestAsk;
    return this;
  }

   /**
   * Lowest current purchase price
   * @return lowestAsk
  **/
  public String getLowestAsk() {
    return lowestAsk;
  }

  public void setLowestAsk(String lowestAsk) {
    this.lowestAsk = lowestAsk;
  }

  public CurrencyPair highestBid(String highestBid) {
    this.highestBid = highestBid;
    return this;
  }

   /**
   * Highest current sale price
   * @return highestBid
  **/
  public String getHighestBid() {
    return highestBid;
  }

  public void setHighestBid(String highestBid) {
    this.highestBid = highestBid;
  }

  public CurrencyPair percentChange(String percentChange) {
    this.percentChange = percentChange;
    return this;
  }

   /**
   * Price change percentage
   * @return percentChange
  **/
  public String getPercentChange() {
    return percentChange;
  }

  public void setPercentChange(String percentChange) {
    this.percentChange = percentChange;
  }

  public CurrencyPair baseVolume(String baseVolume) {
    this.baseVolume = baseVolume;
    return this;
  }

   /**
   * Base units traded in the last 24 hours
   * @return baseVolume
  **/
  public String getBaseVolume() {
    return baseVolume;
  }

  public void setBaseVolume(String baseVolume) {
    this.baseVolume = baseVolume;
  }

  public CurrencyPair quoteVolume(String quoteVolume) {
    this.quoteVolume = quoteVolume;
    return this;
  }

   /**
   * Quoted units traded in the last 24 hours
   * @return quoteVolume
  **/
  public String getQuoteVolume() {
    return quoteVolume;
  }

  public void setQuoteVolume(String quoteVolume) {
    this.quoteVolume = quoteVolume;
  }

  public CurrencyPair isFrozen(String isFrozen) {
    this.isFrozen = isFrozen;
    return this;
  }

   /**
   * Indicates if this market is currently trading or not
   * @return isFrozen
  **/
  public String getIsFrozen() {
    return isFrozen;
  }

  public void setIsFrozen(String isFrozen) {
    this.isFrozen = isFrozen;
  }

  public CurrencyPair high24hr(String high24hr) {
    this.high24hr = high24hr;
    return this;
  }

   /**
   * The highest execution price for this pair within the last 24 hours
   * @return high24hr
  **/
  public String getHigh24hr() {
    return high24hr;
  }

  public void setHigh24hr(String high24hr) {
    this.high24hr = high24hr;
  }

  public CurrencyPair low24hr(String low24hr) {
    this.low24hr = low24hr;
    return this;
  }

   /**
   * The lowest execution price for this pair within the last 24 hours
   * @return low24hr
  **/
  public String getLow24hr() {
    return low24hr;
  }

  public void setLow24hr(String low24hr) {
    this.low24hr = low24hr;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyPair currencyPair = (CurrencyPair) o;
    return Objects.equals(this.id, currencyPair.id) &&
        Objects.equals(this.last, currencyPair.last) &&
        Objects.equals(this.lowestAsk, currencyPair.lowestAsk) &&
        Objects.equals(this.highestBid, currencyPair.highestBid) &&
        Objects.equals(this.percentChange, currencyPair.percentChange) &&
        Objects.equals(this.baseVolume, currencyPair.baseVolume) &&
        Objects.equals(this.quoteVolume, currencyPair.quoteVolume) &&
        Objects.equals(this.isFrozen, currencyPair.isFrozen) &&
        Objects.equals(this.high24hr, currencyPair.high24hr) &&
        Objects.equals(this.low24hr, currencyPair.low24hr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, last, lowestAsk, highestBid, percentChange, baseVolume, quoteVolume, isFrozen, high24hr, low24hr);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyPair {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    lowestAsk: ").append(toIndentedString(lowestAsk)).append("\n");
    sb.append("    highestBid: ").append(toIndentedString(highestBid)).append("\n");
    sb.append("    percentChange: ").append(toIndentedString(percentChange)).append("\n");
    sb.append("    baseVolume: ").append(toIndentedString(baseVolume)).append("\n");
    sb.append("    quoteVolume: ").append(toIndentedString(quoteVolume)).append("\n");
    sb.append("    isFrozen: ").append(toIndentedString(isFrozen)).append("\n");
    sb.append("    high24hr: ").append(toIndentedString(high24hr)).append("\n");
    sb.append("    low24hr: ").append(toIndentedString(low24hr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public String getPrimaryCurrency() {
    return primaryCurrency;
  }

  public void setPrimaryCurrency(String primaryCurrency) {
    this.primaryCurrency = primaryCurrency;
  }

  public String getSecondaryCurrency() {
    return secondaryCurrency;
  }

  public void setSecondaryCurrency(String secondaryCurrency) {
    this.secondaryCurrency = secondaryCurrency;
  }
}
